Index: ezsdk-5_05_02_00/ezsdk/example-applications/linux-driver-examples-psp04.04.00.01/video/saLoopBack.c
===================================================================
--- ezsdk-5_05_02_00.orig/ezsdk/example-applications/linux-driver-examples-psp04.04.00.01/video/saLoopBack.c	2014-12-01 13:39:22.901962812 -0600
+++ ezsdk-5_05_02_00/ezsdk/example-applications/linux-driver-examples-psp04.04.00.01/video/saLoopBack.c	2014-12-01 13:40:40.013959291 -0600
@@ -54,6 +54,7 @@
 #include <sys/mman.h>
 #include <errno.h>
 #include <string.h>
+#include <time.h>
 #include <linux/videodev2.h>
 #include <linux/fb.h>
 #include <linux/ti81xxfb.h>
@@ -67,7 +68,7 @@
 
 
 /* device node to be used for capture */
-#define CAPTURE_DEVICE		"/dev/video0"
+#define CAPTURE_DEVICE		"/dev/video7"
 #define CAPTURE_NAME		"Capture"
 /* device node to be used for display */
 #define DISPLAY_DEVICE		"/dev/video1"
@@ -75,7 +76,7 @@
 /* number of frames to be captured and displayed
  * Increase this for long runs
  */
-#define MAXLOOPCOUNT		500
+#define MAXLOOPCOUNT		2500
 
 /* Pixel format for capture and display. Capture supports
  * V4L2_PIX_FMT_NV12, V4L2_PIX_FMT_NV16, V4L2_PIX_FMT_RGB24 but display
@@ -87,7 +88,7 @@
 #define APP_NAME		"saLoopBack"
 
 /* Define below #def for debug information enable */
-#undef SALOOPBACK_DEBUG
+#define SALOOPBACK_DEBUG
 
 
 /* Structure for storing buffer information */
@@ -139,12 +140,14 @@
 	int mode = O_RDWR;
 
 	/* Open capture driver */
+	printf("### -- saLoopBack: Opening device\n"); sleep(1);
 	capt.fd = open((const char *)CAPTURE_DEVICE, mode);
 	if (capt.fd == -1) {
 		printf("failed to open capture device\n");
 		return -1;
 	}
 	/* Query for capabilities */
+	printf("### -- saLoopBack: Querying capabilities\n"); sleep(1);
 	if (ioctl(capt.fd, VIDIOC_QUERYCAP, &capt.cap)) {
 		printf("Query capability failed\n");
 		exit(2);
@@ -157,13 +160,15 @@
 			printf("Driver is capabled of scaling and cropping\n");
 
 	}
-	system("echo 0 > /sys/devices/platform/vpss/display0/enabled");
+	system("echo 0 > /sys/devices/platform/vpss/graphics0/enabled");
+	//system("echo 0 > /sys/devices/platform/vpss/display0/enabled"); tmp
 	/* Query the preset. Set it to invalid and query for it */
 	capt.dv_preset.preset = 0x0;
+	printf("### -- saLoopBack: Querying dv preset\n"); sleep(1);
 	if (ioctl(capt.fd, VIDIOC_QUERY_DV_PRESET, &capt.dv_preset)) {
 		printf("Querying DV Preset failed\n");
 		exit(2);
-	}
+	} printf("### -- saLoopBack: dv preset is %u\n",capt.dv_preset.preset); sleep(1);
 	switch (capt.dv_preset.preset) {
 	case V4L2_DV_720P60:
 		printf("%s:\n Mode set is 720P60\n", APP_NAME);
@@ -184,11 +189,13 @@
 	default:
 		printf("%s:\n Mode set is %d\n", APP_NAME, capt.dv_preset.preset);
 	}
+	printf("### -- saLoopBack: Setting dv preset\n"); sleep(1);
 	if (ioctl(capt.fd, VIDIOC_S_DV_PRESET, &capt.dv_preset)) {
 		printf("Setting DV Preset failed\n");
 		exit(2);
 	}
-	system("echo 1 > /sys/devices/platform/vpss/display0/enabled");
+	//system("echo 1 > /sys/devices/platform/vpss/display0/enabled"); tmp
+	printf("### -- saLoopBack: Capture init done\n");
 	return 0;
 }
 /* Open display driver and set format according to resolution on capture */
@@ -224,13 +231,16 @@
 	int ret;
 
 	/* Get current format */
+	printf("### -- saLoopBack: setting capture driver\n"); sleep(1);
 	capt.fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+	printf("### -- saLoopBack: getting format\n");
 	ret = ioctl(capt.fd, VIDIOC_G_FMT, &capt.fmt);
 	if (ret < 0) {
-		printf("Set Format failed\n");
+		printf("Get Format failed\n");
 		return -1;
 	}
 	/* Set format according to mode detected */
+	printf("### -- saLoopBack: preset still %u\n",capt.dv_preset.preset); sleep(1);
 	if (capt.dv_preset.preset == V4L2_DV_720P60) {
 		capt.fmt.fmt.pix.width = 1280;
 		capt.fmt.fmt.pix.height = 720;
@@ -244,6 +254,8 @@
 	capt.fmt.fmt.pix.bytesperline = capt.fmt.fmt.pix.width * 2;
 	capt.fmt.fmt.pix.sizeimage = capt.fmt.fmt.pix.bytesperline *
 		capt.fmt.fmt.pix.height;
+
+	printf("### -- saLoopBack: setting format\n"); sleep(1);
 	ret = ioctl(capt.fd, VIDIOC_S_FMT, &capt.fmt);
 	if (ret < 0) {
 		printf("Set Format failed\n");
@@ -251,17 +263,19 @@
 	}
 	/* Get format again and print it on console */
 	capt.fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+	printf("### -- saLoopBack: getting format\n"); sleep(1);
 	ret = ioctl(capt.fd, VIDIOC_G_FMT, &capt.fmt);
 	if (ret < 0) {
-		printf("Set Format failed\n");
+		printf("Get Format failed\n");
 		return -1;
 	}
-	printFormat("Capture", &capt.fmt);
+	printFormat("Capture", &capt.fmt); sleep(1);
 
 	/* Request buffers. We are operating in userPtr mode */
 	capt.reqbuf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
 	capt.reqbuf.count = MAX_BUFFER;
 	capt.reqbuf.memory = V4L2_MEMORY_USERPTR;
+	printf("### -- saLoopBack: requesting buffers as USERPTR\n"); sleep(1);
 	ret = ioctl(capt.fd, VIDIOC_REQBUFS, &capt.reqbuf);
 	if (ret < 0) {
 		printf("Could not allocate the buffers\n");
@@ -526,6 +540,7 @@
 	 * can write on to them. Driver allocates contiguous memory for
 	 * three buffers. These buffers can be displayed one by one. */
 	buffersize = fixinfo.line_length * varinfo.yres;
+	printf("## saLoopBack: buffer_size for mmap = %d", buffersize);
 	buffer_addr[0] = (unsigned char *)mmap(0,
 			buffersize *  MAX_BUFFER,
 			(PROT_READ | PROT_WRITE),
@@ -600,86 +615,155 @@
 /* Main function */
 int main(int argc, char *argv[])
 {
-	int i = 0, ret = 0;
+	int i = 0, ret = 0, debug = 0;
 	struct v4l2_buffer temp_buf;
+	struct v4l2_buffer file_buf;
 	struct timeval before, after, result;
+
+	const char *name[2];
+	name[0] = "capture_test0.yuv";
+	name[1] = "capture_test1.yuv";
+	name[2] = "capture_test2.yuv";
+	name[3] = "capture_test3.yuv";
+	name[4] = "capture_test4.yuv";
+
+	if(argc > 1){
+		printf("### -- saLoopBack: debug mode on\n");
+		debug = 1;
+	}
+
+	printf("### -- saLoopBack: init camera setup\n"); sleep(1);
+	//system ("./ov5640_config.sh init");
+	//system ("./ov5640_config.sh write_reg");
 
 	/* Divert fbdev to dvo2 so that it does  not do blending with display*/
-	system ("echo 1:dvo2 > /sys/devices/platform/vpss/graphics0/nodes");
+	//system ("echo 1:dvo2 > /sys/devices/platform/vpss/graphics0/nodes"); tmp
 	/* Open the capture driver. Query the resolution from the capture driver
 	 */
+	printf("### -- saLoopBack: init capture\n"); sleep(1);
 	ret = initCapture();
 	if (ret < 0) {
 		printf("Error in opening capture device for channel 0\n");
 		return ret;
-	}
+	} printf("### -- saLoopBack: init capture done\n");
+
+	printf("\n### -- saLoopBack: sleeping 3 secs ###############################\n\n");
+	sleep(1);
+
+	printf("### -- saLoopBack: opening display driver\n"); sleep(1);
 	/* Open the Display driver. */
 	ret = initDisplay();
 	if (ret < 0) {
 		printf("Error in opening display device for channel 0\n");
 		return ret;
-	}
+	}	printf("### -- saLoopBack: opening display driver done\n");
+
+	printf("\n### -- saLoopBack: sleeping 3 secs ###############################\n\n");
+	sleep(1);
+
 restart:
 	/* Setup the capture driver Step includes
 	 * Set the format according to the resolution queried.
 	 * request for buffer descriptors for userpointer buffers
 	 */
+	printf("### -- saLoopBack: setting up capture driver\n"); sleep(1);
 	ret = setupCapture();
 	if (ret < 0) {
 		printf("Error in setting up of capture\n");
 		return ret;
-	}
+	} printf("### -- saLoopBack: setting up capture driver done\n");
+
+	printf("\n### -- saLoopBack: sleeping 3 secs ###############################\n\n");
+	sleep(1);
+
 	/* Setup the display driver Step includes
 	 * Set the format according to the resolution queried by capture.
 	 * request for buffer descriptors for userpointer buffers
 	 */
+
+	printf("### -- saLoopBack: setting up display driver\n"); sleep(1);
 	ret = setupDisplay();
 	if (ret < 0) {
 		printf("Error in setting up of Display\n");
 		return ret;
-	}
+	} printf("### -- saLoopBack: setting up display driver done\n");
+
+	printf("\n### -- saLoopBack: sleeping 3 secs ###############################\n\n");
+	sleep(1);
+
 	/* As application works on userPointer, Buffers for both capture and
 	 * display driver are allocated using the fbdev, buffers. Below functionality
 	 * setups the fbdev to mmap the buffers and later capture and display
 	 * will use those buffers
 	 */
+	printf("### -- saLoopBack: setting up buffers\n"); sleep(1);
 	ret = setupBuffers();
 	if (ret < 0) {
 		printf("Error in setting up of Buffers\n");
 		return ret;
-	}
+	} printf("### -- saLoopBack: setting up buffers done\n");
+
+	printf("\n### -- saLoopBack: sleeping 3 secs ###############################\n\n");
+	sleep(1);
+
 	/* Total 8 buffers are allocated using fbdev, 4 buffers are primed to
 	 * capture driver.
 	 */
+	printf("### -- saLoopBack: queue capture buffers\n"); sleep(1);
 	ret = queueCaptureBuffers();
 	if (ret < 0) {
 		printf("Error in queuing capture buffers\n");
 		return ret;
-	}
+	} printf("### -- saLoopBack: queue capture buffers done\n");
+
+	printf("\n### -- saLoopBack: sleeping 3 secs ###############################\n\n");
+	sleep(1);
+
 	/* Total 8 buffers are allocated using fbdev, 4 buffers are primed to
 	 * display driver.
 	 */
+	printf("### -- saLoopBack: queue display buffers\n"); sleep(1);
 	ret = queueDisplayBuffers();
 	if (ret < 0) {
 		printf("Error in queuing display buffers\n");
 		return ret;
-	}
+	}printf("### -- saLoopBack: queue display buffers done\n");
+
+	printf("\n### -- saLoopBack: sleeping 3 secs ###############################\n\n");
+	sleep(1);
+
 	/* Start display driver always first. This is because display driver
 	 * takes 2 frames to come out of start. If capture is started first
 	 * frame drops will be seen, since capture will already complete two
 	 * frame by time display starts
 	 */
+	printf("### -- saLoopBack: start display\n"); sleep(1);
 	ret = startDisplay();
 	if (ret < 0) {
 		printf("Error starring capture \n");
 		return ret;
-	}
+	} printf("### -- saLoopBack: start display done\n");
+
+	printf("\n### -- saLoopBack: sleeping 3 secs ###############################\n\n");
+	sleep(1);
+
 	/* Start capture driver after display driver */
+	printf("### -- saLoopBack: start capture\n"); sleep(1);
 	ret = startCapture();
 	if (ret < 0) {
 		printf("Error starring capture \n");
 		return ret;
-	}
+	} printf("### -- saLoopBack: start capture done\n");
+
+	printf("### -- saLoopBack: going to finish\n");
+	//goto finish;
+
+	printf("### -- saLoopBack: enable camera capture\n"); sleep(1);
+	//system ("./ov5640_config.sh enable");
+
+	printf("\n### -- saLoopBack: START CAPTURE ###############################\n\n");
+	//sleep(3);
+
 	/* Get time of day to calculate FPS */
 	gettimeofday(&before, NULL);
 	/* Start the steady state loop. Following steps are followed
@@ -689,28 +773,32 @@
 	 * 4 queue dislay buffer pointer to capture
 	 * 5 queue capture buffer pointer to display
 	 */
+	printf("### -- saLoopBack: starting capture loop\n");
+
 	for (i = 0; i < MAXLOOPCOUNT; i++) {
 		/* Dq capture buffer */
+		if (debug) printf("### -- saLoopBack: dequeuing capture buffer\n");
 		ret = ioctl(capt.fd, VIDIOC_DQBUF, &capt.buf);
 		if (ret < 0) {
-			perror("VIDIOC_DQBUF\n");
+			printf("VIDIOC_DQBUF ERROR\n");
 			return -1;
 		}
 		/* Because of IP bugs, capture hardware gets locked up once in
 		 * a while. In that case DQbuf will return  V4L2_BUF_FLAG_ERROR
 		 * in flags.
 		 */
+/*
 		if (capt.buf.flags & V4L2_BUF_FLAG_ERROR) {
-			/* If DQbuf returned error check for the hardware lockup
-			 */
+			// If DQbuf returned error check for the hardware lockup
+			 //
 			ret = ioctl(capt.fd, TICAPT_CHECK_OVERFLOW, &capt.over_flow);
 			if (ret < 0) {
 				perror("TICAPT_CHECK_OVERFLOW\n");
 				return -1;
 			} else {
-				/* If hardware locked up, restart display and
-				 * capture driver
-				 */
+				// If hardware locked up, restart display and
+				// capture driver
+
 				if (capt.over_flow.porta_overflow) {
 					printf("Port a overflowed\n\n\n\n\n\n\n");
 					stopCapture();
@@ -726,17 +814,39 @@
 				}
 			}
 		}
+*/
 		/* DQ display buffer */
+		if (debug) printf("### -- saLoopBack: dequeuing display buffer\n");
 		ret = ioctl(disp.fd, VIDIOC_DQBUF, &disp.buf);
 		if (ret < 0) {
-			perror("VIDIOC_DQBUF Display\n");
+			printf("VIDIOC_DQBUF Display\n");
 			return -1;
 		}
 		/* Exchange display and capture buffer pointers */
+		if (debug) printf("### -- saLoopBack: exchange buffers\n");
 		temp_buf.m.userptr = capt.buf.m.userptr;
 		capt.buf.m.userptr = disp.buf.m.userptr;
 		disp.buf.m.userptr = temp_buf.m.userptr;
+
+		if ( ((i % 500) == 0) & (i > 0) ){
+			printf("## saLoopBack: TEST FRAME TO MEM\n");
+			/* Write output to binary file */
+			//int new_file;
+			unsigned int length = capt.fmt.fmt.pix.sizeimage;
+			printf("## saLoopBack: buffer_length = %d\n",length);
+			FILE *fh = fopen(name[(i/500)-1],"wb");
+			if (fh != NULL){
+				fwrite(temp_buf.m.userptr,1,length,fh);
+			} else {
+				printf("## saLoopBack: error with file handler, name[%d]\n", ((i/500)-1));
+			}
+			printf("## saLoopBack: New output file created\n");
+			/* Close output file */
+			fclose(fh);
+		}
+
 		/* Queue the capture buffer with updated address */
+		//printf("### -- saLoopBack: queuing capture buffer\n");
 		ret = ioctl(capt.fd, VIDIOC_QBUF, &capt.buf);
 		if (ret < 0) {
 			perror("VIDIOC_QBUF\n");
@@ -746,6 +856,7 @@
 		disp.buf.memory = V4L2_MEMORY_USERPTR;
 		disp.buf.length = capt.fmt.fmt.pix.sizeimage;
 		/* Queue the display buffer back with updated address */
+		//printf("### -- saLoopBack: queuing display buffer\n");
 		ret = ioctl(disp.fd, VIDIOC_QBUF, &disp.buf);
 		if (ret < 0) {
 			perror("VIDIOC_QBUF Display\n");
@@ -754,23 +865,30 @@
 		if ((i % 1000) == 0)
 			printf("Count=%d\n", i);
 	}
+
 	/* Get end time to calculate FPS */
 	gettimeofday(&after, NULL);
 	/* Calculate FPS */
 	calc_result_time(&result, &after, &before);
-	printf("Frame rate = %lu\n", MAXLOOPCOUNT/result.tv_sec);
+	printf("\nsaLoopBack: Elapsed Time = %lu.%lu\n\n", result.tv_sec, result.tv_usec);
+	printf("\nsaLoopBack: FrameRate = %lu\n\n", MAXLOOPCOUNT/result.tv_sec);
+
+	sleep(1);
+
 	/* Stop capture driver */
 	ret = stopCapture();
 	if (ret < 0) {
 		printf("Error in stopping capture\n");
 		return ret;
 	}
+
 	/* Stop display driver */
 	ret = stopDisplay();
 	if (ret < 0) {
 		printf("Error in stopping display\n");
 		return ret;
 	}
+
 	/* Deinit capture driver */
 	ret = deInitCapture();
 	if (ret < 0) {
@@ -784,10 +902,12 @@
 		return ret;
 	}
 	close(fbdev_fd);
-	system("echo 0 > /sys/devices/platform/vpss/display0/enabled");
-	system ("echo 1080p-60 > /sys/devices/platform/vpss/display0/mode");
-	system("echo 0 > /sys/devices/platform/vpss/graphics0/enabled");
-	system("echo 1 > /sys/devices/platform/vpss/display0/enabled");
-	system("echo 1:hdmi > /sys/devices/platform/vpss/graphics0/nodes");
+	//system("echo 0 > /sys/devices/platform/vpss/display0/enabled");
+	//system ("echo 1080p-60 > /sys/devices/platform/vpss/display0/mode");
+	//system("echo 0 > /sys/devices/platform/vpss/graphics0/enabled");
+	//system("echo 1 > /sys/devices/platform/vpss/display0/enabled");
+	//system("echo 1:hdmi > /sys/devices/platform/vpss/graphics0/nodes");
+
+finish:
 	return 0;
 }
